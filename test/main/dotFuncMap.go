package main
import(
	"fmt"
    "reflect"
    "bytes"
    "net"
    "net/http"
    "net/url"
    "bufio"
    "strings"
    "strconv"
    "encoding/asn1"
    "encoding/json"
    "github.com/456vv/vmap/v2"
    "github.com/456vv/vconnpool"
    "github.com/456vv/vbody"
    "github.com/456vv/vcipher"
    "github.com/456vv/vweb"
    "regexp"
    "unicode"
    "unicode/utf8"
    "os"
    "io"
    "io/ioutil"
    "context"
    "time"
    "crypto"
    "crypto/aes"
    "crypto/cipher"
    "crypto/des"
    "crypto/dsa"
    "crypto/ecdsa"
    "crypto/elliptic"
    "crypto/hmac"
    "crypto/rand"
    "crypto/rsa"
    "crypto/tls"
    "crypto/x509"
    "crypto/x509/pkix"
    "math/big"
    "unsafe"
    "path/filepath"
    "path"
)

var dotFuncMap = map[string]map[string]interface{}{
	"vweb":{
		"ConfigSitePlugin": func() *vweb.ConfigSitePlugin { return &vweb.ConfigSitePlugin{}},
		"PluginHTTPClient": func() *vweb.PluginHTTPClient {return &vweb.PluginHTTPClient{}},
		"ConfigPluginHTTPClient": vweb.ConfigPluginHTTPClient,
		"PluginRPCClient": func() *vweb.PluginRPCClient {return &vweb.PluginRPCClient{}},
		"ConfigPluginRPCClient": vweb.ConfigPluginRPCClient,
		"GenerateRandomId":vweb.GenerateRandomId,
		"GenerateRandom":vweb.GenerateRandom,
		"GenerateRandomString":vweb.GenerateRandomString,
		"AddSalt":vweb.AddSalt,
		"PagePath":vweb.PagePath,
		"Cookie":func() *vweb.Cookie {return &vweb.Cookie{}},
		"Session":func() *vweb.Session {return &vweb.Session{}},
		"NewSession":vweb.NewSession,
		"Sessions":func() *vweb.Sessions {return &vweb.Sessions{}},
		"SitePool":func() *vweb.SitePool {return &vweb.SitePool{}},
		"NewSitePool":vweb.NewSitePool,
		"Site":func() *vweb.Site {return &vweb.Site{}},
		"NewSite":vweb.NewSite,
		"Sites":func() *vweb.Sites {return &vweb.Sites{}},
		"NewSites":vweb.NewSites,
		"ServerHandlerStatic":func() *vweb.ServerHandlerStatic {return &vweb.ServerHandlerStatic{}},
		"ServerHandlerDynamic":func() *vweb.ServerHandlerDynamic {return &vweb.ServerHandlerDynamic{}},
	},
	"vconnpool":{
		"ConnPool": func() *vconnpool.ConnPool {return &vconnpool.ConnPool{}},
	},
	"vbody":{
		"NewReader": vbody.NewReader,
		"NewWriter": vbody.NewWriter,
	},
	"vcipher":{
		"AES": vcipher.AES,
		"NewCipher": vcipher.NewCipher,
	},
	"vmap":{
		"NewMap":vmap.NewMap,
	},
	"path":{
		"Base": path.Base,
		"Clean": path.Clean,
		"Dir": path.Dir,
		"Ext": path.Ext,
		"IsAbs": path.IsAbs,
		"Join": path.Join,
		"Split": path.Split,
		"Match": path.Match,
	},
	"path/filepath":{
		"Separator": filepath.Separator,
		"ListSeparator": filepath.ListSeparator,
		"Abs": filepath.Abs,
		"Rel": filepath.Rel,
		"Base": filepath.Base,
		"Clean": filepath.Clean,
		"Dir": filepath.Dir,
		"EvalSymlinks": filepath.EvalSymlinks,
		"Ext": filepath.Ext,
		"FromSlash": filepath.FromSlash,
		"ToSlash": filepath.ToSlash,
		"Glob": filepath.Glob,
		"HasPrefix": filepath.HasPrefix,
		"IsAbs": filepath.IsAbs,
		"Join": filepath.Join,
		"Match": filepath.Match,
		"Split": filepath.Split,
		"SplitList": filepath.SplitList,
		"VolumeName": filepath.VolumeName,
	},
	"fmt":{
		"Errorf": fmt.Errorf,
		"Fprint": fmt.Fprint,
		"Fprintf": fmt.Fprintf,
		"Fprintln": fmt.Fprintln,
		"Sprint": fmt.Sprint,
		"Sprintf": fmt.Sprintf,
		"Sprintln":fmt.Sprintln,
	},
    "reflect":{
        "Copy": reflect.Copy,
        "DeepEqual": reflect.DeepEqual,
        "Select": reflect.Select,
        "Swapper": reflect.Swapper,
		"ChanDir": func(ChanDir int) reflect.ChanDir {return reflect.ChanDir(ChanDir)},
        "RecvDir": reflect.RecvDir,
        "SendDir": reflect.SendDir,
        "BothDir": reflect.BothDir,
		"Kind": func(Kind uint) reflect.Kind {return reflect.Kind(Kind)},
        "Invalid": reflect.Invalid,
        "Bool": reflect.Bool,
        "Int": reflect.Int,
        "Int8": reflect.Int8,
        "Int16": reflect.Int16,
        "Int32": reflect.Int32,
        "Int64": reflect.Int64,
        "Uint": reflect.Uint,
        "Uint8": reflect.Uint8,
        "Uint16": reflect.Uint16,
        "Uint32": reflect.Uint32,
        "Uint64": reflect.Uint64,
        "Uintptr": reflect.Uintptr,
        "Float32": reflect.Float32,
        "Float64": reflect.Float64,
        "Complex64": reflect.Complex64,
        "Complex128": reflect.Complex128,
        "Array": reflect.Array,
        "Chan": reflect.Chan,
        "Func": reflect.Func,
        "Interface": reflect.Interface,
        "Map": reflect.Map,
        "Ptr": reflect.Ptr,
        "Slice": reflect.Slice,
        "String": reflect.String,
        "Struct": reflect.Struct,
        "UnsafePointer": reflect.UnsafePointer,
		"Method": func() *reflect.Method {return &reflect.Method{}},
		"SelectCase": func() *reflect.SelectCase {return &reflect.SelectCase{}},
		"SelectDir": func(SelectDir int) reflect.SelectDir {return reflect.SelectDir(SelectDir)},
		"SelectSend": reflect.SelectSend,
		"SelectRecv": reflect.SelectRecv,
		"SelectDefault": reflect.SelectDefault,
		"SliceHeader": func() *reflect.SliceHeader {return &reflect.SliceHeader{}},
		"StringHeader": func() *reflect.StringHeader {return &reflect.StringHeader{}},
		"StructField": func() *reflect.StructField {return &reflect.StructField{}},
		"StructTag": func(StructTag string) reflect.StructTag {return reflect.StructTag(StructTag)},
		"ArrayOf": reflect.ArrayOf,
        "ChanOf": reflect.ChanOf,
        "FuncOf": reflect.FuncOf,
        "MapOf": reflect.MapOf,
        "PtrTo": reflect.PtrTo,
        "SliceOf": reflect.SliceOf,
        "StructOf": reflect.StructOf,
        "TypeOf": reflect.TypeOf,
		"Value": func() *reflect.Value {return &reflect.Value{}},
        "Append": reflect.Append,
        "AppendSlice": reflect.AppendSlice,
        "Indirect": reflect.Indirect,
        "MakeChan": reflect.MakeChan,
        "MakeFunc": reflect.MakeFunc,
        "MakeMap": reflect.MakeMap,
        "MakeMapWithSize":reflect.MakeMapWithSize,
        "MakeSlice": reflect.MakeSlice,
        "New": reflect.New,
        "NewAt": reflect.NewAt,
        "ValueOf": reflect.ValueOf,
        "Zero": reflect.Zero,
    },
    "unsafe":{
    	"Uintptr": func(Pointer unsafe.Pointer) uintptr {return uintptr(Pointer)},
		"Pointer": func(Pointer uintptr) unsafe.Pointer {return unsafe.Pointer(Pointer)},
		"Alignof": func(Pointer uintptr) uintptr {return unsafe.Alignof(Pointer)},
		"Sizeof":func(Pointer uintptr) uintptr {return unsafe.Sizeof(Pointer)},
    },
    "context":{
		"CancelFunc": func(CancelFunc func()) context.CancelFunc {return context.CancelFunc(CancelFunc)},
    	"Background": context.Background,
    	"TODO": context.TODO,
    	"WithCancel": context.WithCancel,
    	"WithDeadline": context.WithDeadline,
    	"WithTimeout": context.WithTimeout,
    	"WithValue": context.WithValue,
    },
    "time":{
		"ANSIC": time.ANSIC,
		"UnixDate": time.UnixDate,
		"RubyDate": time.RubyDate,
		"RFC822": time.RFC822,
		"RFC822Z": time.RFC822Z,
		"RFC850": time.RFC850,
		"RFC1123": time.RFC1123,
		"RFC1123Z": time.RFC1123Z,
		"RFC3339": time.RFC3339,
		"RFC3339Nano": time.RFC3339Nano,
		"Kitchen": time.Kitchen,
		"Stamp": time.Stamp,
		"StampMilli": time.StampMilli,
		"StampMicro": time.StampMicro,
		"StampNano": time.StampNano,
		"Duration": func(Duration int64) time.Duration {return time.Duration(Duration)},
		"Nanosecond": time.Nanosecond,
		"Microsecond": time.Microsecond,
		"Millisecond": time.Millisecond,
		"Second": time.Second,
		"Minute": time.Minute,
		"Hour": time.Hour,
		"After": time.After,
		"Sleep": time.Sleep,
		"Tick": time.Tick,
		"ParseDuration": time.ParseDuration,
		"Since": time.Since,
		"Until": time.Until,
		"Location": func() *time.Location {return &time.Location{}},
		"Local": time.Local,
		"UTC": time.UTC,
		"FixedZone": time.FixedZone,
		"LoadLocation": time.LoadLocation,
		"LoadLocationFromTZData": time.LoadLocationFromTZData,
		"Month": func(Month int) time.Month {return time.Month(Month)},
		"Ticker": func() *time.Ticker {return &time.Ticker{}},
		"NewTicker": time.NewTicker,
		"Time": func() *time.Time {return &time.Time{}},
		"Date": time.Date,
		"Now": time.Now,
		"Parse": time.Parse,
		"ParseInLocation": time.ParseInLocation,
		"Unix": time.Unix,
		"Timer": func() *time.Timer {return &time.Timer{}},
		"AfterFunc": time.AfterFunc,
		"NewTimer": time.NewTimer,
		"Weekday": func(Weekday int) time.Weekday {return time.Weekday(Weekday)},
    },
    "net": {
		"DefaultResolver": net.DefaultResolver,
		"InterfaceAddrs": net.InterfaceAddrs,
		"Interfaces": net.Interfaces,
		"JoinHostPort": net.JoinHostPort,
		"LookupAddr": net.LookupAddr,
		"LookupCNAME": net.LookupCNAME,
		"LookupHost": net.LookupHost,
		"LookupIP": net.LookupIP,
		"LookupMX": net.LookupMX,
		"LookupNS": net.LookupNS,
		"LookupPort": net.LookupPort,
		"LookupSRV": net.LookupSRV,
		"LookupTXT": net.LookupTXT,
		"SplitHostPort": net.SplitHostPort,
		"Buffers": func(Buffers [][]byte) net.Buffers {return Buffers},
		"Dial": net.Dial,
		"DialTimeout": net.DialTimeout,
		"Dialer": func() *net.Dialer {return &net.Dialer{}},
		"Flags": func(Flags uint) net.Flags {return net.Flags(Flags)},
		"HardwareAddr": func(HardwareAddr []byte) net.HardwareAddr {return HardwareAddr},
		"ParseMAC": net.ParseMAC,
		"IP": func(IP []byte) net.IP {return IP},
		"IPv4": net.IPv4,
		"ParseCIDR": net.ParseCIDR,
		"ParseIP": net.ParseIP,
		"IPAddr": func() *net.IPAddr {return &net.IPAddr{}},
		"ResolveIPAddr": net.ResolveIPAddr,
		"IPConn": func() *net.IPConn {return &net.IPConn{}},
		"DialIP": net.DialIP,
		"IPMask": func(IPMask []byte) net.IPMask {return IPMask},
		"CIDRMask": net.CIDRMask,
		"IPv4Mask": net.IPv4Mask,
		"IPNet": func() *net.IPNet {return &net.IPNet{}},
		"Interface": func() *net.Interface {return &net.Interface{}},
		"InterfaceByIndex": net.InterfaceByIndex,
		"InterfaceByName": net.InterfaceByName,
		"MX": func() *net.MX {return &net.MX{}},
		"NS": func() *net.NS {return &net.NS{}},
		"Resolver": func() *net.Resolver {return &net.Resolver{}},
		"SRV": func() *net.SRV {return &net.SRV{}},
		"TCPAddr": func() *net.TCPAddr {return &net.TCPAddr{}},
		"ResolveTCPAddr": net.ResolveTCPAddr,
		"TCPConn": func() *net.TCPConn {return &net.TCPConn{}},
		"DialTCP": net.DialTCP,
		"UDPAddr": func() *net.UDPAddr {return &net.UDPAddr{}},
		"ResolveUDPAddr": net.ResolveUDPAddr,
		"UDPConn": func() *net.UDPConn {return &net.UDPConn{}},
		"DialUDP": net.DialUDP,
    },
	"net/http":{
		"LocalAddrContextKey": http.LocalAddrContextKey,
		"ServerContextKey": http.ServerContextKey,
		"NoBody": http.NoBody,
		"DefaultClient": http.DefaultClient,
		"DefaultTransport": http.DefaultTransport,
		"Client": func() *http.Client {return &http.Client{}},
		"ConnState": func(ConnState int) http.ConnState {return http.ConnState(ConnState)},
		"Cookie": func() *http.Cookie {return &http.Cookie{}},
		"SameSite": func(SameSite int) http.SameSite {return http.SameSite(SameSite)},
		"Header": func() *http.Header {return &http.Header{}},
		"PushOptions": func() *http.PushOptions {return &http.PushOptions{}},
		"Request": func() *http.Request {return &http.Request{}},
		"NewRequest": http.NewRequest,
		"ReadRequest": http.ReadRequest,
		"Response": func() *http.Response {return &http.Response{}},
		"Get": http.Get,
		"Head": http.Head,
		"Post": http.Post,
		"PostForm": http.PostForm,
		"ReadResponse": http.ReadResponse,
		"Transport": func() *http.Transport {return &http.Transport{}},
	},
	"crypto":{
		"RegisterHash": crypto.RegisterHash,
		"Hash": func(Hash int) crypto.Hash {return crypto.Hash(Hash)},
	},
	"crypto/aes":{
		"NewCipher": aes.NewCipher,
	},
	"crypto/des":{
		"NewCipher": des.NewCipher,
		"NewTripleDESCipher": des.NewTripleDESCipher,
	},
	"crypto/dsa":{
		"GenerateKey": dsa.GenerateKey,
		"GenerateParameters": dsa.GenerateParameters,
		"Sign": dsa.Sign,
		"Verify": dsa.Verify,
		"ParameterSizes": func(ParameterSizes int) dsa.ParameterSizes {return dsa.ParameterSizes(ParameterSizes)},
		"Parameters": func() *dsa.Parameters {return &dsa.Parameters{}},
		"PrivateKey": func() *dsa.PrivateKey {return &dsa.PrivateKey{}},
		"PublicKey": func() *dsa.PublicKey {return &dsa.PublicKey{}},
	},
	"crypto/rsa":{
		"DecryptOAEP": rsa.DecryptOAEP,
		"DecryptPKCS1v15": rsa.DecryptPKCS1v15,
		"DecryptPKCS1v15SessionKey": rsa.DecryptPKCS1v15SessionKey,
		"EncryptOAEP": rsa.EncryptOAEP,
		"EncryptPKCS1v15": rsa.EncryptPKCS1v15,
		"SignPKCS1v15": rsa.SignPKCS1v15,
		"SignPSS": rsa.SignPSS,
		"VerifyPKCS1v15": rsa.VerifyPKCS1v15,
		"VerifyPSS": rsa.VerifyPSS,
		"CRTValue": func() *rsa.CRTValue {return &rsa.CRTValue{}},
		"OAEPOptions": func() *rsa.OAEPOptions {return &rsa.OAEPOptions{}},
		"PKCS1v15DecryptOptions": func() *rsa.PKCS1v15DecryptOptions {return &rsa.PKCS1v15DecryptOptions{}},
		"PSSOptions": func() *rsa.PSSOptions {return &rsa.PSSOptions{}},
		"PrecomputedValues": func() *rsa.PrecomputedValues {return &rsa.PrecomputedValues{}},
		"PrivateKey": func() *rsa.PrivateKey {return &rsa.PrivateKey{}},
		"GenerateKey": rsa.GenerateKey,
		"GenerateMultiPrimeKey": rsa.GenerateMultiPrimeKey,
		"PublicKey": func() *rsa.PublicKey {return &rsa.PublicKey{}},
	},
	"crypto/ecdsa":{
		"Sign": ecdsa.Sign,
		"Verify": ecdsa.Verify,
		"GenerateKey": ecdsa.GenerateKey,
		"PrivateKey": func() *ecdsa.PrivateKey {return &ecdsa.PrivateKey{}},
		"PublicKey": func() *ecdsa.PublicKey {return &ecdsa.PublicKey{}},
	},
	"crypto/elliptic":{
		"GenerateKey": elliptic.GenerateKey,
		"Marshal": elliptic.Marshal,
		"Unmarshal": elliptic.Unmarshal,
		"P224": elliptic.P224,
		"P256": elliptic.P256,
		"P384": elliptic.P384,
		"P521": elliptic.P521,
		"CurveParams": func() *elliptic.CurveParams {return &elliptic.CurveParams{}},
	},
	"crypto/hmac":{
		"Equal": hmac.Equal,
		"New": hmac.New,
	},
	"crypto/rand":{
		"Reader": rand.Reader,
		"Int": rand.Int,
		"Prime": rand.Prime,
		"Read": rand.Read,
	},
	"crypto/cipher":{
		"NewGCMWithTagSize": cipher.NewGCMWithTagSize,
		"NewGCM": cipher.NewGCM,
		"NewGCMWithNonceSize": cipher.NewGCMWithNonceSize,
		"NewCBCDecrypter": cipher.NewCBCDecrypter,
		"NewCBCEncrypter": cipher.NewCBCEncrypter,
		"NewCFBDecrypter": cipher.NewCFBDecrypter,
		"NewCFBEncrypter": cipher.NewCFBEncrypter,
		"NewCTR": cipher.NewCTR,
		"NewOFB": cipher.NewOFB,
		"StreamReader": func() *cipher.StreamReader {return &cipher.StreamReader{}},
		"StreamWriter": func() *cipher.StreamWriter {return &cipher.StreamWriter{}},
	},
	"crypto/tls":{
		"Certificate": func() *tls.Certificate {return &tls.Certificate{}},
		"LoadX509KeyPair": tls.LoadX509KeyPair,
		"X509KeyPair": tls.X509KeyPair,
		"CertificateRequestInfo": func() *tls.CertificateRequestInfo {return &tls.CertificateRequestInfo{}},
		"ClientAuthType": func(ClientAuthType int) tls.ClientAuthType {return tls.ClientAuthType(ClientAuthType)},
		"ClientHelloInfo": func() *tls.ClientHelloInfo {return &tls.ClientHelloInfo{}},
		"NewLRUClientSessionCache": tls.NewLRUClientSessionCache,
		"ClientSessionState": func() *tls.ClientSessionState {return &tls.ClientSessionState{}},
		"Config": func() *tls.Config {return &tls.Config{}},
		"Conn": func() *tls.Conn {return &tls.Conn{}},
		"Client": tls.Client,
		"Dial": tls.Dial,
		"DialWithDialer": tls.DialWithDialer,
		"ConnectionState": func() *tls.ConnectionState {return &tls.ConnectionState{}},
		"CurveID": func(CurveID uint16) tls.CurveID {return tls.CurveID(CurveID)},
		"RenegotiationSupport": func(RenegotiationSupport int) tls.RenegotiationSupport {return tls.RenegotiationSupport(RenegotiationSupport)},
		"SignatureScheme": func(SignatureScheme uint16) tls.SignatureScheme {return tls.SignatureScheme(SignatureScheme)},
   	},
   	"crypto/x509":{
		"CreateCertificate": x509.CreateCertificate,
		"CreateCertificateRequest": x509.CreateCertificateRequest,
		"DecryptPEMBlock": x509.DecryptPEMBlock,
		"EncryptPEMBlock": x509.EncryptPEMBlock,
		"IsEncryptedPEMBlock": x509.IsEncryptedPEMBlock,
		"MarshalECPrivateKey": x509.MarshalECPrivateKey,
		"MarshalPKCS1PublicKey": x509.MarshalPKCS1PublicKey,
		"MarshalPKCS1PrivateKey": x509.MarshalPKCS1PrivateKey,
		"MarshalPKIXPublicKey": x509.MarshalPKIXPublicKey,
		"MarshalPKCS8PrivateKey": x509.MarshalPKCS8PrivateKey,
		"ParseCRL": x509.ParseCRL,
		"ParseCertificates": x509.ParseCertificates,
		"ParseDERCRL": x509.ParseDERCRL,
		"ParseECPrivateKey": x509.ParseECPrivateKey,
		"ParsePKCS1PublicKey": x509.ParsePKCS1PublicKey,
		"ParsePKCS1PrivateKey": x509.ParsePKCS1PrivateKey,
		"ParsePKCS8PrivateKey": x509.ParsePKCS8PrivateKey,
		"ParsePKIXPublicKey": x509.ParsePKIXPublicKey,
		"CertPool": func() *x509.CertPool {return &x509.CertPool{}},
		"NewCertPool": x509.NewCertPool,
		"SystemCertPool": x509.SystemCertPool,
		"Certificate": func() *x509.Certificate {return &x509.Certificate{}},
		"ParseCertificate": x509.ParseCertificate,
		"CertificateRequest": func() *x509.CertificateRequest {return &x509.CertificateRequest{}},
		"ParseCertificateRequest": x509.ParseCertificateRequest,
		"KeyUsage": func(KeyUsage int) x509.KeyUsage {return x509.KeyUsage(KeyUsage)},
		"PEMCipher": func(PEMCipher int) x509.PEMCipher {return x509.PEMCipher(PEMCipher)},
		"PublicKeyAlgorithm": func(PublicKeyAlgorithm int) x509.PublicKeyAlgorithm {return x509.PublicKeyAlgorithm(PublicKeyAlgorithm)},
		"SignatureAlgorithm": func(SignatureAlgorithm int) x509.SignatureAlgorithm {return x509.SignatureAlgorithm(SignatureAlgorithm)},
		"VerifyOptions": func() *x509.VerifyOptions {return &x509.VerifyOptions{}},
	},
	"crypto/x509/pkix":{
		"AlgorithmIdentifier": func() *pkix.AlgorithmIdentifier {return &pkix.AlgorithmIdentifier{}},
		"AttributeTypeAndValue": func() *pkix.AttributeTypeAndValue {return &pkix.AttributeTypeAndValue{}},
		"AttributeTypeAndValueSET": func() *pkix.AttributeTypeAndValueSET {return &pkix.AttributeTypeAndValueSET{}},
		"CertificateList": func() *pkix.CertificateList {return &pkix.CertificateList{}},
		"Extension": func() *pkix.Extension {return &pkix.Extension{}},
		"Name": func() *pkix.Name {return &pkix.Name{}},
		"RDNSequence": func(RDNSequence []pkix.RelativeDistinguishedNameSET) pkix.RDNSequence {return RDNSequence},
		"RelativeDistinguishedNameSET": func(RelativeDistinguishedNameSET []pkix.AttributeTypeAndValue) pkix.RelativeDistinguishedNameSET {return RelativeDistinguishedNameSET},
		"RevokedCertificate": func() *pkix.RevokedCertificate {return &pkix.RevokedCertificate{}},
		"TBSCertificateList": func() *pkix.TBSCertificateList {return &pkix.TBSCertificateList{}},
	},
	"encoding/asn1":{
		"MarshalWithParams": asn1.MarshalWithParams,
		"Marshal": asn1.Marshal,
		"Unmarshal": asn1.Unmarshal,
		"UnmarshalWithParams": asn1.UnmarshalWithParams,
		"BitString": func() *asn1.BitString {return &asn1.BitString{}},
		"Flag": func(Flag bool) asn1.Flag {return asn1.Flag(Flag)},
		"ObjectIdentifier": func(ObjectIdentifier []int) asn1.ObjectIdentifier {return ObjectIdentifier},
		"RawContent": func(RawContent []byte) asn1.RawContent {return RawContent},
		"RawValue": func() *asn1.RawValue {return &asn1.RawValue{}},
	},
	"math/big":{
		"Jacobi": big.Jacobi,
		"Accuracy": func(Accuracy int8) big.Accuracy {return big.Accuracy(Accuracy)},
		"Float": func() *big.Float {return &big.Float{}},
		"NewFloat": big.NewFloat,
		"ParseFloat": big.ParseFloat,
		"Int": func() *big.Int {return &big.Int{}},
		"NewInt": big.NewInt,
		"Rat": func() *big.Rat {return &big.Rat{}},
		"NewRat": big.NewRat,
		"RoundingMode": func(RoundingMode byte) big.RoundingMode {return big.RoundingMode(RoundingMode)},
		"Word": func(Word uint) big.Word {return big.Word(Word)},
	},
	"bufio":{
		"ScanBytes": bufio.ScanBytes,
		"ScanLines": bufio.ScanLines,
		"ScanRunes": bufio.ScanRunes,
		"ScanWords": bufio.ScanWords,
		"ReadWriter": func() *bufio.ReadWriter {return &bufio.ReadWriter{}},
		"NewReadWriter": bufio.NewReadWriter,
		"Reader": func() *bufio.Reader {return &bufio.Reader{}},
		"NewReader": bufio.NewReader,
		"NewReaderSize": bufio.NewReaderSize,
		"Writer": func() *bufio.Writer {return &bufio.Writer{}},
		"NewWriter": bufio.NewWriter,
		"NewWriterSize": bufio.NewWriterSize,
		"Scanner": func() *bufio.Scanner {return &bufio.Scanner{}},
		"SplitFunc": func(SplitFunc func(data []byte, atEOF bool) (advance int, token []byte, err error)) bufio.SplitFunc {return bufio.SplitFunc(SplitFunc)},
		"NewScanner": bufio.NewScanner,
	},
	"url":{
		"PathEscape": url.PathEscape,
		"PathUnescape": url.PathUnescape,
		"QueryEscape": url.QueryEscape,
		"QueryUnescape": url.QueryUnescape,
		"URL": func() *url.URL {return &url.URL{}},
		"Parse": url.Parse,
		"ParseRequestURI": url.ParseRequestURI,
		"Userinfo": func() *url.Userinfo {return &url.Userinfo{}},
		"User": url.User,
		"UserPassword": url.UserPassword,
		"Values": func(Values map[string][]string) url.Values {return Values},
		"ParseQuery": url.ParseQuery,
	},
    "strings": {
    	"Compare": strings.Compare,
        "Contains": strings.Contains,
        "ContainsAny": strings.ContainsAny,
        "ContainsRune": strings.ContainsRune,
        "Count": strings.Count,
        "EqualFold": strings.EqualFold,
        "Fields": strings.Fields,
        "FieldsFunc": strings.FieldsFunc,
        "HasPrefix": strings.HasPrefix,
        "HasSuffix": strings.HasSuffix,
        "Index": strings.Index,
        "IndexAny": strings.IndexAny,
        "IndexByte": strings.IndexByte,
        "IndexFunc": strings.IndexFunc,
        "IndexRune": strings.IndexRune,
        "LastIndex": strings.LastIndex,
        "LastIndexAny": strings.LastIndexAny,
        "LastIndexByte": strings.LastIndexByte,
        "LastIndexFunc": strings.LastIndexFunc,
        "Map": strings.Map,
        "Repeat": strings.Repeat,
        "Replace": strings.Replace,
        "Join": strings.Join,
        "Split": strings.Split,
        "SplitN": strings.SplitN,
        "SplitAfter": strings.SplitAfter,
        "SplitAfterN": strings.SplitAfterN,
        "Title": strings.Title,
        "ToLower": strings.ToLower,
        "ToLowerSpecial": strings.ToLowerSpecial,
        "ToTitle": strings.ToTitle,
        "ToTitleSpecial": strings.ToTitleSpecial,
        "ToUpper": strings.ToUpper,
        "ToUpperSpecial": strings.ToUpperSpecial,
        "Trim": strings.Trim,
        "TrimFunc": strings.TrimFunc,
        "TrimLeft": strings.TrimLeft,
        "TrimPrefix": strings.TrimPrefix,
        "TrimLeftFunc": strings.TrimLeftFunc,
        "TrimRight": strings.TrimRight,
        "TrimSuffix": strings.TrimSuffix,
        "TrimRightFunc": strings.TrimRightFunc,
        "TrimSpace": strings.TrimSpace,
		"Reader": func() *strings.Reader {return &strings.Reader{}},
        "NewReader": strings.NewReader,
		"Replacer": func() *strings.Replacer {return &strings.Replacer{}},
        "NewReplacer": strings.NewReplacer,
        "Builder": func() *strings.Builder {return &strings.Builder{}},
    },
    "bytes": {
        "Compare": bytes.Compare,
        "Contains": bytes.Contains,
        "ContainsAny": bytes.ContainsAny,
        "ContainsRune": bytes.ContainsRune,
        "Count": bytes.Count,
        "Equal": bytes.Equal,
        "EqualFold": bytes.EqualFold,
        "Fields": bytes.Fields,
        "FieldsFunc": bytes.FieldsFunc,
        "HasPrefix": bytes.HasPrefix,
        "HasSuffix": bytes.HasSuffix,
        "Index": bytes.Index,
        "IndexAny": bytes.IndexAny,
        "IndexByte": bytes.IndexByte,
        "IndexFunc": bytes.IndexFunc,
        "IndexRune": bytes.IndexRune,
        "LastIndex": bytes.LastIndex,
        "LastIndexAny": bytes.LastIndexAny,
        "LastIndexByte":bytes.LastIndexByte,
        "LastIndexFunc": bytes.LastIndexFunc,
        "Map": bytes.Map,
        "Repeat": bytes.Repeat,
        "Replace": bytes.Replace,
        "Runes": bytes.Runes,
        "Join": bytes.Join,
        "Split": bytes.Split,
        "SplitN": bytes.SplitN,
        "SplitAfter": bytes.SplitAfter,
        "SplitAfterN": bytes.SplitAfterN,
        "Title": bytes.Title,
        "ToLower": bytes.ToLower,
        "ToLowerSpecial": bytes.ToLowerSpecial,
        "ToTitle": bytes.ToTitle,
        "ToTitleSpecial": bytes.ToTitleSpecial,
        "ToUpper": bytes.ToUpper,
        "ToUpperSpecial": bytes.ToUpperSpecial,
        "Trim": bytes.Trim,
        "TrimFunc": bytes.TrimFunc,
        "TrimPrefix": bytes.TrimPrefix,
        "TrimLeft": bytes.TrimLeft,
        "TrimLeftFunc": bytes.TrimLeftFunc,
        "TrimSuffix": bytes.TrimSuffix,
        "TrimRight": bytes.TrimRight,
        "TrimRightFunc": bytes.TrimRightFunc,
        "TrimSpace": bytes.TrimSpace,
		"Buffer": func() *bytes.Buffer {return &bytes.Buffer{}},
        "NewBuffer": bytes.NewBuffer,
        "NewBufferString": bytes.NewBufferString,
		"Reader": func() *bytes.Reader {return &bytes.Reader{}},
        "NewReader": bytes.NewReader,
    },
    "strconv": {
        "AppendBool": strconv.AppendBool,
        "AppendFloat": strconv.AppendFloat,
        "AppendInt": strconv.AppendInt,
        "AppendUint": strconv.AppendUint,
        "AppendQuote": strconv.AppendQuote,
        "AppendQuoteToASCII": strconv.AppendQuoteToASCII,
        "AppendQuoteRune": strconv.AppendQuoteRune,
        "AppendQuoteRuneToASCII": strconv.AppendQuoteRuneToASCII,
        "AppendQuoteRuneToGraphic": strconv.AppendQuoteRuneToGraphic,
        "AppendQuoteToGraphic": strconv.AppendQuoteToGraphic,
        "Atoi": strconv.Atoi,
        "Itoa": strconv.Itoa,
        "CanBackquote": strconv.CanBackquote,
        "FormatBool": strconv.FormatBool,
        "FormatFloat": strconv.FormatFloat,
        "FormatInt": strconv.FormatInt,
        "FormatUint": strconv.FormatUint,
        "IsGraphic": strconv.IsGraphic,
        "IsPrint": strconv.IsPrint,
        "ParseBool": strconv.ParseBool,
        "ParseFloat": strconv.ParseFloat,
        "ParseInt": strconv.ParseInt,
        "ParseUint": strconv.ParseUint,
        "Quote": strconv.Quote,
        "QuoteToASCII": strconv.QuoteToASCII,
        "QuoteToGraphic":strconv.QuoteToGraphic,
        "QuoteRune": strconv.QuoteRune,
        "QuoteRuneToASCII": strconv.QuoteRuneToASCII,
        "QuoteRuneToGraphic":strconv.QuoteRuneToGraphic,
        "Unquote": strconv.Unquote,
        "UnquoteChar": strconv.UnquoteChar,
    },
    "encoding/json": {
		"Compact": json.Compact,
		"Indent": json.Indent,
		"HTMLEscape": json.HTMLEscape,
		"Marshal": json.Marshal,
		"MarshalIndent": json.MarshalIndent,
		"Unmarshal": json.Unmarshal,
		"NewEncoder": json.NewEncoder,
		"NewDecoder": json.NewDecoder,
		"Valid": json.Valid,
	},
    "regexp": {
        "Match": regexp.Match,
        "MatchReader": regexp.MatchReader,
        "MatchString": regexp.MatchString,
        "QuoteMeta": regexp.QuoteMeta,
        "Compile": regexp.Compile,
        "CompilePOSIX": regexp.CompilePOSIX,
    },
    "unicode": {
    	"In": unicode.In,
        "Is": unicode.Is,
        "IsControl": unicode.IsControl,
        "IsDigit": unicode.IsDigit,
        "IsGraphic": unicode.IsGraphic,
        "IsPrint": unicode.IsPrint,
        "IsLetter": unicode.IsLetter,
        "IsLower": unicode.IsLower,
        "IsTitle": unicode.IsTitle,
        "IsUpper": unicode.IsUpper,
        "IsMark": unicode.IsMark,
        "IsNumber": unicode.IsNumber,
        "IsOneOf": unicode.IsOneOf,
        "IsPunct": unicode.IsPunct,
        "IsSpace": unicode.IsSpace,
        "IsSymbol": unicode.IsSymbol,
        "SimpleFold": unicode.SimpleFold,
        "To": unicode.To,
        "ToLower": unicode.ToLower,
        "ToTitle": unicode.ToTitle,
        "ToUpper": unicode.ToUpper,
    },
    "unicode/utf8": {
        "DecodeLastRune": utf8.DecodeLastRune,
        "DecodeLastRuneInString": utf8.DecodeLastRuneInString,
        "DecodeRune": utf8.DecodeRune,
        "DecodeRuneInString": utf8.DecodeRuneInString,
        "EncodeRune": utf8.EncodeRune,
        "FullRune": utf8.FullRune,
        "FullRuneInString": utf8.FullRuneInString,
        "RuneCount": utf8.RuneCount,
        "RuneCountInString": utf8.RuneCountInString,
        "RuneLen": utf8.RuneLen,
        "RuneStart": utf8.RuneStart,
        "Valid": utf8.Valid,
        "ValidRune": utf8.ValidRune,
        "ValidString": utf8.ValidString,
    },
    "io": {
		"EOF": io.EOF,
		"Copy": io.Copy,
		"CopyBuffer": io.CopyBuffer,
		"CopyN": io.CopyN,
		"ReadAtLeast": io.ReadAtLeast,
		"ReadFull": io.ReadFull,
		"WriteString": io.WriteString,
		"Pipe": io.Pipe,
		"LimitReader": io.LimitReader,
		"MultiReader": io.MultiReader,
		"TeeReader": io.TeeReader,
		"NewSectionReader": io.NewSectionReader,
		"MultiWriter": io.MultiWriter,
    },
    "io/ioutil": {
    	"Discard": ioutil.Discard,
    	"NopCloser": ioutil.NopCloser,
        "ReadAll": ioutil.ReadAll,
        "ReadFile":ioutil.ReadFile,
        "WriteFile":ioutil.WriteFile,
    },
    "os":{
    	"IsTimeout": os.IsTimeout,
    	"IsExist": os.IsExist,
    	"IsNotExist": os.IsNotExist,
    	"IsPermission": os.IsPermission,
    	"Link": os.Link,
    	"Readlink": os.Readlink,
    	"Symlink": os.Symlink,
    	"Mkdir": os.Mkdir,
    	"MkdirAll": os.MkdirAll,
    	"TempDir": os.TempDir,
    	"Remove": os.Remove,
    	"RemoveAll": os.RemoveAll,
    	"Rename": os.Rename,
    	"Create": os.Create,
    	"NewFile": os.NewFile,
    	"Open": os.Open,
    	"OpenFile": os.OpenFile,
    	"Lstat": os.Lstat,
    	"Stat": os.Stat,
    	"Pipe": os.Pipe,
    	"FileMode": func(FileMode uint32) os.FileMode {return os.FileMode(FileMode)},
    },
}
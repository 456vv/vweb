//gop

import (
	"github.com/456vv/vforward"
	vweb "github.com/456vv/vweb/v2"
	builtin "github.com/456vv/vweb/v2/builtin"
	"log"
	"strconv"
	"fmt"
	"net"
	"time"
	"bytes"
)

func main(T vweb.TemplateDoter) string {
	
	R := T.Request()
	G := T.Global()
	
	query := R.URL.Query()
	network := query.Get("Network")
	ipa := query.Get("Aaddr")
	ipb := query.Get("Baddr")
	porta := query.Get("Aport")
	portb := query.Get("Bport")
	verifya := query.Get("Averify")
	verifyb := query.Get("Bverify")
	status := query.Get("Status")
	if network == "" {
		network = "tcp"
	}
	if ipa == "" {
		ipa = "0.0.0.0"
	}
	if ipb == "" {
		ipb = "0.0.0.0"
	}
	if porta == "" {
		return "Aport 参数缺少"
	}
	if portb == "" {
		return "Bport 参数缺少"
	}
	portai, portaie := strconv.Atoi(porta)
	if Error(portaie) {
		return "Aport 非整数"
	}
	portbi, portbie := strconv.Atoi(portb)
	if Error(portbie) {
		return "Bport 非整数"
	}
	
	key := fmt.Sprint(network, ipa, porta, ipb, portb)
	
	if status == "start" {
		if G.Has(key+"l2l") {
			return "准备存在"
		}
		addra := &vforward.Addr{
			Network: "tcp",
			Local: &net.TCPAddr{
				IP: net.ParseIP(ipa),
				Port: portai,
			},
		}
		addrb := &vforward.Addr{
			Network: "tcp", 
			Local: &net.TCPAddr{
				IP: net.ParseIP(ipb),
				Port: portbi,
			},
		}
		l2l := &vforward.L2L{
			MaxConn: 2,
		}
		l2lSwap, l2lSwape := l2l.Transport(addra, addrb)
		if Error(l2lSwape) {
			return "准备失败"
		}
		l2lSwap.Verify = func(a, b net.Conn) (net.Conn, net.Conn, error){
			if verifya != ""  {
				bufa := make([]byte, len(verifya))
				n, ne := a.Read(bufa)
				if Error(ne) {
					a.Close()
					b.Close()
					return nil, nil, ne
				}
				if !bytes.Equal(bufa[:n], []byte(verifya)) {
					a.Close()
					b.Close()
					return nil, nil, fmt.Errorf("error")
				}
			}
			if verifyb != ""  {
				bufb := make([]byte, len(verifyb))
				i, ie := b.Read(bufb)
				if Error(ie) {
					a.Close()
					b.Close()
					return nil, nil, ie
				}
				if !bytes.Equal(bufb[:i], []byte(verifyb)) {
					a.Close()
					b.Close()
					return nil, nil, fmt.Errorf("error")
				}
			}
			return a, b, nil
		}
		G.Set(key+"l2l", l2l)
		G.Set(key+"l2lSwap", l2lSwap)
		failure := MakeChan("bool", 1)
		Go(func(){
			e := l2lSwap.Swap()
			if Error(e) {
				G.Del(key+"l2lSwap")
				Send(failure, true)
				Close(failure)
			}
		})
		time.Sleep(time.Second)
		inf := TryRecv(failure)
		if NotNil(inf) {
			return "启动失败"
		}
		return "启动成功"
	}else if status == "pause" {
		if !G.Has(key+"l2lSwap") {
			return "不存在"
		}
		inf := G.Get(key+"l2lSwap")
		CallMethod(inf, "Close")
		return "暂时成功"
	}else if status == "restore" {
		if !G.Has(key+"l2lSwap") {
			return "不存在"
		}
		failure := MakeChan("bool", 1)
		Go(func(){
			inf := G.Get(key+"l2lSwap")
			retn, e := CallMethod(inf, "Swap")
			if Error(e) {
				log.Println(e)
				return
			}
			if Error(retn[0]) {
				Send(failure, true)
				Close(failure)
			}
		})
		time.Sleep(time.Second)
		inf := TryRecv(failure)
		if NotNil(inf) {
			return "恢复失败"
		}
		return "恢复成功"
	}else if status == "stop" {
		if !G.Has(key+"l2l") {
			return "不存在"
		}
		inf := G.Get(key+"l2l")
		CallMethod(inf, "Close")
		G.Del(key+"l2lSwap")
		G.Del(key+"l2l")
		return "停止成功"
	}
}
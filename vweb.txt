const (
	Version	string = "VWEB/v2.0.0" // 版本号
)
VARIABLES
var	DefaultSitePool	= NewSitePool()	// 网站池（默认）
var	TemplateFuncMap	= map[string]interface{}{}
FUNCTIONS
func AddSalt(rnd []byte, salt string) string
func CopyStruct(dsc, src interface{}, handle func(name string, dsc,	src	reflect.Value) bool) error
func CopyStructDeep(dsc, src interface{}, handle func(name string, dsc,	src	reflect.Value) bool) error
func DepthField(s interface{}, index ...interface{}) (field	interface{}, err error)
func ExtendDotFuncMap(pkgName string, deputy map[string]interface{})
func ForMethod(x interface{}) string
func ForType(x interface{},	all	bool) string
func GenerateRandom(length int)	([]byte, error)
func GenerateRandomId(rnd []byte) error
func GenerateRandomString(length int) (string, error)
func InDirect(v	reflect.Value) reflect.Value
func PagePath(root,	p string, index	[]string) (os.FileInfo,	string,	error)
func TypeSelect(v reflect.Value) interface{}
TYPES
type Cookie	struct {
	R *http.Request		  //请求
	W http.ResponseWriter //响应
}
    func (c	*Cookie) Add(name, value, path,	domain string, maxAge int, secure, only	bool, sameSite http.SameSite)
    func (c	*Cookie) Del(name string)
    func (c	*Cookie) Get(name string) string
    func (c	*Cookie) ReadAll() map[string]string
    func (c	*Cookie) RemoveAll()
type Cookier interface {
	ReadAll() map[string]string
	RemoveAll()
	Get(name string) string
	Add(name, value, path, domain string, maxAge int, secure, only bool, sameSite http.SameSite)
	Del(name string)
}
type DotContexter interface	{
	Context() context.Context		 //	上下文
	WithContext(ctx	context.Context) //	替换上下文
}
type Forward struct	{
	Path		[]string //	多种路径匹配
	ExcludePath	[]string //	排除多种路径匹配
	RePath		string	 //	重写路径
}
func (T	*Forward) Rewrite(upath	string)	(rpath string, rewrited	bool, err error)
type Globaler interface	{
	Set(key, val interface{})		 //	设置
	Has(key	interface{}) bool		 //	检查
	Get(key	interface{}) interface{} //	读取
	Del(key	interface{})			 //	删除
	Reset()							 //	重置
}
type PluginHTTP	interface {
	Type() PluginType
	ServeHTTP(w	http.ResponseWriter, r *http.Request)			// 服务HTTP
	RoundTrip(r	*http.Request) (resp *http.Response, err error)	// 代理
	CancelRequest(req *http.Request)							// 取消HTTP请求
	CloseIdleConnections()										// 关闭空闲连接
	RegisterProtocol(scheme	string,	rt http.RoundTripper)		// 注册新协议
}
type PluginHTTPClient struct {
	Tr	   *http.Transport // 客户端
	Addr   string		   // 地址
	Scheme string		   // 协议（用于默认填充）
	Host   string		   // 请求Host（用于默认填充）
	Dialer *net.Dialer
}
func (T	*PluginHTTPClient) Connection()	(PluginHTTP, error)
type PluginRPC interface {
	Type() PluginType
	Register(value interface{})
	Call(name string, arg interface{}) (interface{}, error)
	Discard() error
	Close()	error
}
type PluginRPCClient struct	{
	ConnPool *vconnpool.ConnPool //	连接池
	Addr	 string				 //	地址
	Path	 string				 //	路径
}
    func (T	*PluginRPCClient) Connection() (PluginRPC, error)
type PluginType	int
const (
	PluginTypeRPC PluginType = iota
	PluginTypeHTTP
)
type Responser interface {
	Write([]byte) (int,	error)						  // 写入字节
	WriteString(string)	(int, error)				  // 写入字符串
	ReadFrom(io.Reader)	(int64,	error)				  // 读取并写入
	Redirect(string, int)							  // 转向
	WriteHeader(int)								  // 状态码
	Error(string, int)								  // 错误
	Flush()											  // 刷新缓冲
	Push(target	string,	opts *http.PushOptions)	error // HTTP/2推送
	Hijack() (net.Conn,	*bufio.ReadWriter, error)	  // 劫持，能双向互相发送信息
}
type Route struct {
	HandlerError func(w	http.ResponseWriter, r *http.Request) // 错误访问处理
}
    func (T	*Route)	HandleFunc(url string, handler func(w http.ResponseWriter, r *http.Request))
    func (T	*Route)	ServeHTTP(w	http.ResponseWriter, r *http.Request)
type ServerHandlerDynamic struct {
	RootPath string	// 根目录
	PagePath string	// 主模板文件路径
	BuffSize	int64															  // 缓冲块大小
	Site		*Site															  // 网站配置
	LibReadFunc	func(tmplName, rootPath, dirPath, libname string) ([]byte, error) // 读取库
	Context		context.Context
}
    func (T	*ServerHandlerDynamic) Execute(bufw	*bytes.Buffer, dock	interface{}) (err error)
    func (T	*ServerHandlerDynamic) Parse(bufr *bytes.Buffer) error
    func (T	*ServerHandlerDynamic) ParseFile(path string) error
    func (T	*ServerHandlerDynamic) ParseText(content, name string) error
    func (T	*ServerHandlerDynamic) ServeHTTP(rw	http.ResponseWriter, req *http.Request)
type ServerHandlerStatic struct	{
	RootPath, PagePath string // 根目录, 页路径
	PageExpired		   int64  // 页面过期时间（秒为单位）
	BuffSize		   int64  // 缓冲块大小
}
    func (T	*ServerHandlerStatic) ServeHTTP(rw http.ResponseWriter,	req	*http.Request)
type Session struct	{
	*vmap.Map // 数据，用户存储的数据
}
    func NewSession() *Session
    func (T	*Session) Defer(call interface{}, args ...interface{}) error
    func (T	*Session) Free()
    func (T	*Session) Token() string
type Sessioner interface {
	Token()	string
	Set(key, val interface{})
	Has(key	interface{}) bool
	Get(key	interface{}) interface{}
	GetHas(key interface{})	(val interface{}, ok bool)
	Del(key	interface{})
	SetExpired(key interface{},	d time.Duration)
	SetExpiredCall(key interface{},	d time.Duration, f func(interface{}))
	Reset()
	Defer(call interface{},	args ...interface{}) error
	Free()
}
type Sessions struct {
	Expired		 time.Duration // 保存session时间长
	Name		 string		   // 标识名称
	Size		 int		   // 会话ID长度
	Salt		 string		   // 加盐，由于计算机随机数是伪随机数。（可默认为空）
	ActivationID bool		   // 为true，保持会话ID
}
    func (T	*Sessions) DelSession(id string)
    func (T	*Sessions) GetSession(id string) (Sessioner, error)
    func (T	*Sessions) Len() int
    func (T	*Sessions) NewSession()	Sessioner
    func (T	*Sessions) ProcessDeadAll()	[]interface{}
    func (T	*Sessions) Session(rw http.ResponseWriter, req *http.Request) Sessioner
    func (T	*Sessions) SessionId(req *http.Request)	(id	string,	err	error)
    func (T	*Sessions) SetSession(id string, s Sessioner) Sessioner
type Site struct {
	Sessions *Sessions				  // 会话集
	Global	 Globaler				  // Global
	RootDir	 func(path string) string // 网站的根目录
	Extend	 interface{}			  // 接口类型，可以自己存在任何类型
}
func (T	*Site) Identity() string
type SiteMan struct	{}
    func (T	*SiteMan) Add(host string, site	*Site)
    func (T	*SiteMan) Get(host string) (*Site, bool)
    func (T	*SiteMan) Range(f func(host	string,	site *Site)	bool)
type SitePool struct {}
    func NewSitePool() *SitePool
    func (T	*SitePool) Close() error
    func (T	*SitePool) DelSite(name	string)
    func (T	*SitePool) NewSite(name	string)	*Site
    func (T	*SitePool) RangeSite(f func(name string, site *Site) bool)
    func (T	*SitePool) SetRecoverSession(d time.Duration)
    func (T	*SitePool) Start() error
type Swaper	interface {
	New(key	interface{}) *vmap.Map
	GetNewMap(key interface{}) *vmap.Map
	GetNewMaps(key ...interface{}) *vmap.Map
	Len() int
	Set(key, val interface{})
	SetExpired(key interface{},	d time.Duration)
	SetExpiredCall(key interface{},	d time.Duration, f func(interface{}))
	Has(key	interface{}) bool
	Get(key	interface{}) interface{}
	GetHas(key interface{})	(val interface{}, ok bool)
	GetOrDefault(key interface{}, def interface{}) interface{}
	Index(key ...interface{}) interface{}
	IndexHas(key ...interface{}) (interface{}, bool)
	Del(key	interface{})
	Dels(keys []interface{})
	ReadAll() interface{}
	Reset()
	Copy(from *vmap.Map, over bool)
	WriteTo(mm interface{})	(err error)
	ReadFrom(mm	interface{}) error
	MarshalJSON() ([]byte, error)
	UnmarshalJSON(data []byte) error
	String() string
}
type TemplateDot struct	{
	R		 *http.Request		 //	请求
	W		 http.ResponseWriter //	响应
	BuffSize int64				 //	缓冲块大小
	Site	 *Site				 //	网站配置
	Writed	 bool				 //	表示已经调用写入到客户端。这个是只读的
}
    func (T	*TemplateDot) Context()	context.Context
    func (T	*TemplateDot) Cookie() Cookier
    func (T	*TemplateDot) Defer(call interface{}, args ...interface{}) error
    func (T	*TemplateDot) Free()
    func (T	*TemplateDot) Global() Globaler
    func (T	*TemplateDot) Header() http.Header
    func (T	*TemplateDot) Request()	*http.Request
    func (T	*TemplateDot) RequestLimitSize(l int64)	*http.Request
    func (T	*TemplateDot) Response() Responser
    func (T	*TemplateDot) ResponseWriter() http.ResponseWriter
    func (T	*TemplateDot) RootDir(upath	string)	string
    func (T	*TemplateDot) Session()	Sessioner
    func (T	*TemplateDot) Swap() Swaper
    func (T	*TemplateDot) WithContext(ctx context.Context)
type TemplateDoter interface {
	RootDir(path string) string						   // 网站的根目录
	Request() *http.Request							   // 用户的请求信息
	RequestLimitSize(l int64) *http.Request			   // 请求限制大小
	Header() http.Header							   // 标头
	Response() Responser							   // 数据写入响应
	ResponseWriter() http.ResponseWriter			   // 数据写入响应
	Session() Sessioner								   // 用户的会话缓存
	Global() Globaler								   // 全站缓存
	Cookie() Cookier								   // 用户的Cookie
	Swap() Swaper									   // 信息交换
	Defer(call interface{},	args ...interface{}) error // 退回调用
	DotContexter
}
